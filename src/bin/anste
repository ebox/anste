#!/usr/bin/perl

# Copyright (C) 2007 José Antonio Calvo Fernández <jacalvo@warp.es> 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use warnings;
use strict;

use FindBin qw($Bin);
use lib "$Bin/../lib";

use ANSTE::Config;
use ANSTE::Image::Creator;
use ANSTE::Image::Image;
use ANSTE::Deploy::ScenarioDeployer;
use ANSTE::Scenario::Scenario;
use ANSTE::Exceptions::InvalidFile;
use ANSTE::Test::Suite;
use ANSTE::Test::Runner;

use Getopt::Long;
use Pod::Usage;
use Error qw(:try);
use Perl6::Junction qw(none);

my $create = '';
my $deploy = '';
my $test = '';
my $help = 0;


GetOptions('create' => \$create,
           'deploy' => \$deploy,
           'test' => \$test,
           'help' => \$help) or pod2usage(2);

pod2usage(1) if $help;           

if (none($create, $deploy, $test)) {
    pod2usage("$0: No action specified.");
}

pod2usage("$0: No files given.") if @ARGV == 0;

foreach my $file (@ARGV) {
    if ($create) {
        create($file);
    }
    elsif ($deploy) {
        deploy($file);
    }
    elsif ($test) {
        test($file);
    }
}

sub create # (file)
{
    my ($file) = @_;

    my $image = new ANSTE::Image::Image();

    try {
        $image->loadFromFile($file);
    } catch ANSTE::Exceptions::InvalidFile with {
        print STDERR "Can't load image $file.\n";
        exit(1);
    };

    my $address = ANSTE::Config->instance()->firstAddress();
    $image->setIp($address);

    my $creator = new ANSTE::Image::Creator($image);
    $creator->createImage();
}

sub deploy # (file)
{
    my ($file) = @_;

    my $scenario = new ANSTE::Scenario::Scenario();
    try {
        $scenario->loadFromFile($file);
    } catch ANSTE::Exceptions::InvalidFile with {
        print STDERR "Can't load scenario $file.\n";
        exit(1);
    };

    my $deployer = new ANSTE::Deploy::ScenarioDeployer($scenario);
    $deployer->deploy();
}

sub test # (file)
{
    my ($file) = @_;

    my $suite = new ANSTE::Test::Suite;
    try {
        $suite->loadFromDir($file);
    } catch ANSTE::Exceptions::InvalidFile with {
        print STDERR "Can't load test suite $file.\n";
        exit(1);
    };

    my $runner = new ANSTE::Test::Runner();
    $runner->runSuite($suite);

    my $result = $runner->result();
    my $package = ANSTE::Config->instance()->reportWriter() . 'Writer';

    eval("use ANSTE::Report::$package");
    die "Can't load package $package: $@" if $@;

    my $writer = "ANSTE::Report::$package"->new($result);

    $writer->write(\*STDOUT);
}

__END__

=head1 NAME

anste - Advanced Network Service Testing Environment

=head1 SYNOPSIS

anste [options] [file ...]

 Options:
   -help       shows this help
   -create     create a base image
   -deploy     deploy a scenario
   -test       test a suite

=cut
