#!/usr/bin/perl

# Copyright (C) 2007 José Antonio Calvo Fernández <jacalvo@warp.es> 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use warnings;
use strict;

use FindBin qw($Bin);
use lib "$Bin/../lib";

use ANSTE::Config;
use ANSTE::Image::Creator;
use ANSTE::Image::Image;
use ANSTE::Deploy::ScenarioDeployer;
use ANSTE::Scenario::Scenario;
use ANSTE::Exceptions::InvalidFile;
use ANSTE::Test::Suite;
use ANSTE::Test::Runner;
use ANSTE::Report::TextWriter;
use ANSTE::Report::HTMLWriter;

use Getopt::Long;
use Pod::Usage;
use Error qw(:try);
use Perl6::Junction qw(none);

my $create = '';
my $remove = '';
my $deploy = '';
my $test = '';
my $out = '';
my $path = '';
my $video = '';
my $help = 0;
my $quiet = 0;

GetOptions('create' => \$create,
           'remove' => \$remove,
           'deploy' => \$deploy,
           'test' => \$test,
           'path=s' => \$path,
           'out=s' => \$out,
           'video' => \$video,
           'quiet' => \$quiet,
           'help' => \$help) or pod2usage(2);
           
pod2usage(1) if $help;           

if (none($create, $remove, $deploy, $test) == 1) {
    pod2usage("$0: No action specified.");
}

pod2usage("$0: No files given.") if @ARGV == 0;

my $config = ANSTE::Config->instance();

if ($path) {
    $config->setUserPath($path);
}
if ($quiet) {
    $config->setVerbose(0);
}
if ($out) {
    $config->setLogPath($out);
}
if ($video) {
    $config->setSeleniumVideo(1);
}

# Check the config file for missing or malformed options
$config->check();

foreach my $file (@ARGV) {
    if ($create) {
        create($file);
    }
    elsif ($remove) {
        remove($file);
    }
    elsif ($deploy) {
        deploy($file);
    }
    elsif ($test) {
        test($file);
    }
}

sub create # (file)
{
    my ($file) = @_;

    my $image = new ANSTE::Image::Image();

    try {
        $image->loadFromFile($file);
    } catch ANSTE::Exceptions::InvalidFile with {
        print STDERR "Can't load image $file.\n";
        exit(1);
    };

    my $address = $config->firstAddress();
    $image->setIp($address);

    my $creator = new ANSTE::Image::Creator($image);
    if (not $creator->createImage()) {
        my $name = $image->name();
        print STDERR "The image $name already exists.\n".
                     "Delete it before trying to create it again.\n";
        exit(1);                     
    }
}

sub remove # (file)
{
    my ($file) = @_;

    my $image = new ANSTE::Image::Image();

    try {
        $image->loadFromFile($file);
    } catch ANSTE::Exceptions::InvalidFile with {
        print STDERR "Can't load image $file.\n";
        exit(1);
    };

    my $cmd = new ANSTE::Image::Commands($image);
    if (not $cmd->deleteImage()) {
        my $name = $image->name();
        print STDERR "The image $name can't be delete.\n".
                     "Maybe it doesn't exists.\n";
        exit(1);                     
    }
}

sub deploy # (file)
{
    my ($file) = @_;

    my $scenario = new ANSTE::Scenario::Scenario();
    try {
        $scenario->loadFromFile($file);
    } catch ANSTE::Exceptions::InvalidFile with {
        print STDERR "Can't load scenario $file.\n";
        exit(1);
    };

    my $deployer = new ANSTE::Deploy::ScenarioDeployer($scenario);
    $deployer->deploy();
}

sub test # (file)
{
    my ($file) = @_;

    my $runner = new ANSTE::Test::Runner();

    try {
        if (ANSTE::Validate::suite($file)) {
            my $suite = new ANSTE::Test::Suite;
            $suite->loadFromDir($file);
            $runner->runSuite($suite);
        }
        else {
            $runner->runDir($file)
        }
    } catch ANSTE::Exceptions::InvalidFile with {
        print STDERR "Can't load test suite $file.\n";
        exit(1);
    };

    my $report = $runner->report();

    my $txtWriter = new ANSTE::Report::TextWriter($report); 
    $txtWriter->write(\*STDOUT);

    my $LOGPATH = $config->logPath();
    print "\nWriting HTML reports to $LOGPATH...";
    my $htmlWriter = new ANSTE::Report::HTMLWriter($report);
    my $FILE;
    open($FILE, '>', "$LOGPATH/index.html");
    $htmlWriter->write($FILE);
    close($FILE);
    print "Done.\n";
}

__END__

=head1 NAME

anste - Advanced Network Service Testing Environment

=head1 SYNOPSIS

anste [options] [file ...]

 Options:
   -help        shows this help
   -create      create a base image
   -remove      delete a base image
   -deploy      deploy a scenario
   -test        test a suite
   -path <dir>  where to find the data  
   -out  <dir>  report output directory
   -video       save video recording of selenium tests
   -quiet       do not show output of commands

=cut
