#!/usr/bin/perl

# Copyright (C) 2007 José Antonio Calvo Fernández <jacalvo@warp.es> 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use warnings;
use strict;

use FindBin qw($Bin);
use lib "$Bin/../lib";

use ANSTE::Config;
use ANSTE::Image::Creator;
use ANSTE::Image::Image;
use ANSTE::Deploy::ScenarioDeployer;
use ANSTE::Scenario::Scenario;
use ANSTE::Exceptions::InvalidFile;
use ANSTE::Test::Suite;
use ANSTE::Test::Runner;
use ANSTE::Report::TextWriter;
use ANSTE::Report::HTMLWriter;

use Getopt::Long;
use Pod::Usage;
use Error qw(:try);
use Perl6::Junction qw(none);

my $create = '';
my $remove = '';
my $deploy = '';
my $shutdown = '';
my $test = '';
my $out = '';
my $path = '';
my $video = '';
my $format = '';
my $wait = 0;
my $waitFail = 0;
my $help = 0;
my $quiet = 0;
my $step = 0;
my $nonStop = 0;
my $reuse = 0;

GetOptions('create' => \$create,
           'remove' => \$remove,
           'deploy' => \$deploy,
           'shutdown' => \$shutdown,
           'test' => \$test,
           'path=s' => \$path,
           'out=s' => \$out,
           'video' => \$video,
           'format=s' => \$format,
           'quiet' => \$quiet,
           'wait' => \$wait,
           'wait-fail' => \$waitFail,
           'reuse' => \$reuse,
           'step' => \$step,
           'non-stop' => \$nonStop,
           'help' => \$help) or pod2usage(2);

pod2usage(1) if $help;

if (none($create, $remove, $deploy, $shutdown, $test) == 1) {
    pod2usage("$0: No action specified.");
}

pod2usage("$0: No files given.") if @ARGV == 0;

my $config = ANSTE::Config->instance();

unless ($path) {
    $path = '.';
}
$config->setUserPath($path);

if ($quiet) {
    $config->setVerbose(0);
}
if ($wait) {
    $config->setWait(1);
}
if ($waitFail) {
    $config->setWaitFail(1);
}
if ($out) {
    $config->setLogPath($out);
}
if ($video) {
    $config->setSeleniumVideo(1);
}
if ($reuse) {
    $config->setReuse(1);
}
if ($step) {
    $config->setStep(1);
}
if ($nonStop) {
    $config->setNonStop(1);
}

# Check the config file for missing or malformed options
$config->check();

# Check if another instance of ANSTE is running
if (system ("ps aux | grep -v ' $$ ' | grep -v grep | grep -q anste") == 0) {
    print STDERR "Another instance of ANSTE is already running\n";
    exit(1);
}

unless ($shutdown or $remove) {
    # Check virtual machines already running
    if (system ('virsh list | grep running') == 0) {
        print "WARNING: The above virtual machines are running.\n" .
              "Press any key to continue or Control-C to stop.\n";
        my $key;
        read(STDIN, $key, 1);
    }
}

my @files;

# Separate args into files and variables
foreach my $arg (@ARGV) {
    if ($arg =~ /=/) {
        my ($var, $value) = split(/=/, $arg);

        if ($var and $value) {
            try {
                $config->setVariable($var, $value);
            } catch ANSTE::Exceptions::InvalidOption with {
                print STDERR "Invalid variable name: $var\n";
                exit(1);
            };
        }
        else {
            print STDERR "Malformed variable declaration passed.\n";
            exit(1);
        }
    }
    else {
        push(@files, $arg);
    }
}

foreach my $file (@files) {
    if ($create) {
        create($file);
    }
    elsif ($remove) {
        remove($file);
    }
    elsif ($deploy) {
        deploy($file);
    }
    elsif ($shutdown) {
        destroy($file);
    }
    elsif ($test) {
        if ($format) {
            $config->setFormat($format);
        }
        test($file);
    }
}

sub create # (file)
{
    my ($file) = @_;

    my $image = new ANSTE::Image::Image();

    try {
        $image->loadFromFile($file);
    } catch ANSTE::Exceptions::InvalidFile with {
        my $ex = shift;
        my $filename = $ex->file();
        print STDERR "Can't load image $file.\n";
        print STDERR "Reason: Can't open file $filename.\n";
        exit(1);
    } catch ANSTE::Exceptions::Error with {
        my $ex = shift;
        my $msg = $ex->message();
        print STDERR "Error creating image $file:\n";
        print STDERR "$msg\n";
        exit(1);
    };

    my $address = $config->firstAddress();
    $image->setIp($address);

    my $creator = new ANSTE::Image::Creator($image);
    if (not $creator->createImage()) {
        my $name = $image->name();
        print STDERR "The image $name already exists.\n".
                     "Delete it before trying to create it again.\n";
        exit(1);
    }
}

sub remove # (file)
{
    my ($file) = @_;

    my $image = new ANSTE::Image::Image();

    try {
        $image->loadFromFile($file);
    } catch ANSTE::Exceptions::InvalidFile with {
        my $ex = shift;
        my $filename = $ex->file();
        print STDERR "Can't load scenario $file.\n";
        print STDERR "Reason: Can't open file $filename.\n";
        exit(1);
    } catch ANSTE::Exceptions::Error with {
        my $ex = shift;
        my $msg = $ex->message();
        print STDERR "Error removing image $file:\n";
        print STDERR "$msg\n";
        exit(1);
    };

    my $cmd = new ANSTE::Image::Commands($image);
    if (not $cmd->deleteImage()) {
        my $name = $image->name();
        print STDERR "The image $name can't be delete.\n".
                     "Maybe it doesn't exists.\n";
        exit(1);
    }
}

sub deploy # (file)
{
    my ($file) = @_;

    my $scenario = new ANSTE::Scenario::Scenario();
    try {
        $scenario->loadFromFile($file);
    } catch ANSTE::Exceptions::InvalidFile with {
        my $ex = shift;
        my $filename = $ex->file();
        print STDERR "Can't load scenario $file.\n";
        print STDERR "Reason: Can't open file $filename.\n";
        exit(1);
    } catch ANSTE::Exceptions::Error with {
        my $ex = shift;
        my $msg = $ex->message();
        print STDERR "Error deploying scenario $file:\n";
        print STDERR "$msg\n";
        exit(1);
    };

    my $deployer = new ANSTE::Deploy::ScenarioDeployer($scenario);
    $deployer->deploy();
}

sub destroy # (file)
{
    my ($file) = @_;

    my $scenario = new ANSTE::Scenario::Scenario();
    try {
        $scenario->loadFromFile($file);
    } catch ANSTE::Exceptions::InvalidFile with {
        my $ex = shift;
        my $filename = $ex->file();
        print STDERR "Can't load scenario $file.\n";
        print STDERR "Reason: Can't open file $filename.\n";
        exit(1);
    } catch ANSTE::Exceptions::Error with {
        my $ex = shift;
        my $msg = $ex->message();
        print STDERR "Error destroying scenario $file:\n";
        print STDERR "$msg\n";
        exit(1);
    };

    my $deployer = new ANSTE::Deploy::ScenarioDeployer($scenario);
    $deployer->destroy();
}

sub test # (file)
{
    my ($file) = @_;

    my $runner = new ANSTE::Test::Runner();

    if (ANSTE::Validate::suite($file)) {
        try {
            my $suite = new ANSTE::Test::Suite;
            $suite->loadFromDir($file);
            try {
                $runner->runSuite($suite);
            } finally {
                printResults($runner->report());
            };
        } catch ANSTE::Exceptions::InvalidFile with {
            my $ex = shift;
            my $filename = $ex->file();
            print STDERR "Can't load test suite $file.\n";
            print STDERR "Reason: Can't open file $filename.\n";
            exit(1);
        } catch ANSTE::Exceptions::NotFound with {
            my $ex = shift;
            my $what = $ex->what();
            my $value = $ex->value();
            print STDERR "Error running test suite $file.\n";
            print STDERR "Reason: $what $value not found.\n";
            exit(1);
        } catch ANSTE::Exceptions::Error with {
            my $ex = shift;
            my $msg = $ex->message();
            print STDERR "Error running test suite $file:\n";
            print STDERR "$msg\n";
            exit(1);
        };
    }
    else {
        try {
            $runner->runDir($file);
        } finally {
            printResults($runner->report());
        };
    }
}

sub printResults # (report)
{
    my ($report) = @_;

    my $txtWriter = new ANSTE::Report::TextWriter($report);
    $txtWriter->write(\*STDOUT);
}

__END__

=head1 NAME

anste - Advanced Network Service Testing Environment

=head1 SYNOPSIS

anste [options] [file ...] [var1=value1 var2=value2 ...]

 Options:
   -help           show this help
   -create         create a base image
   -remove         delete a base image
   -deploy         deploy a scenario
   -shutdown       finish and delete all the images of a scenario
   -test           test a suite
   -path <dir>     where to find the data (CWD if not specified)
   -out  <dir>     report output directory
   -video          save video recording of selenium tests
   -format <fmt>   select the output format for the reports
   -wait           wait before shutting down after testing complete
   -wait-fail      wait after a test fails
   -step           run tests step by step, waiting after each one
   -non-stop       run all test without waiting, ignoring <stop/>'s
   -quiet          do not show output of commands
   -reuse          reuse the created image if exists (with -create)
                   reuse a deployed scenario (with -test)

=cut
