#!/usr/bin/perl

# Copyright (C) 2007 José Antonio Calvo Fernández <jacalvo@warp.es> 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use warnings;
use strict;

use FindBin qw($Bin);
use lib "$Bin/../lib";

use ANSTE::Scenario::Scenario;

use constant SCENARIO => "data/scenario.xml";

sub doStuffWithServer # (server)
{
	my ($server) = @_;
	my $name = $server->name();
	my $desc = $server->desc();

	print "\nShowing Server...\n";
	print "name = $name\n";
	print "desc = $desc\n";

	doStuffWithNetwork($server->network());
	doStuffWithPackages($server->packages());
}

sub doStuffWithNetwork # (network)
{
    my ($network) = @_;
	foreach my $interface (@{$network->interfaces()}) {
		doStuffWithInterface($interface);
	}
}

sub doStuffWithInterface # (interface)
{
	my ($iface) = @_;
	my $type = ($iface->type() == 
                ANSTE::Scenario::NetworkInterface::IFACE_TYPE_DHCP) ? 
                "dhcp" : 
                "static";
	my $name = $iface->name();
	my $address = $iface->address();
	my $netmask = $iface->netmask();
	my $gateway = $iface->gateway();

	print "Showing Network Interface...\n";
    print "name = $name\n";
	print "type = $type\n";
	if ($type eq "static") {
		print "address = $address\n";
		print "netmask = $netmask\n";
		print "gateway = $gateway\n";
	}
}

sub doStuffWithPackages # (packages)
{
	my ($packages) = @_;

	print "Showing Packages...\n";
	foreach my $package (@{$packages->list()}) {
		print "$package\n";
	}
}

sub doStuff # (scenario)
{
	my ($scenario) = @_; 

	my $name = $scenario->name();
	my $desc = $scenario->desc();

    my $virtualizer = $scenario->virtualizer();
    my $system = $scenario->system();

	print "name = $name\n";
	print "desc = $desc\n";

    print "virtualizer = $virtualizer\n";
    print "system = $system\n";

	foreach my $server (@{$scenario->servers()}) {
		doStuffWithServer($server);
	}
}

my $scenario = new ANSTE::Scenario::Scenario;
$scenario->loadFromFile(SCENARIO);
doStuff($scenario);
