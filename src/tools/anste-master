#!/usr/bin/perl

# Copyright (C) 2007 José Antonio Calvo Fernández <jacalvo@warp.es> 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use warnings;
use strict;

use FindBin qw($Bin);
use lib "$Bin/../lib";

use ANSTE::Validate;
use ANSTE::Comm::MasterClient;
use ANSTE::Comm::WaiterServer;
use ANSTE::Comm::HostWaiter;

use Term::ReadLine;
use Perl6::Slurp;
use Error qw(:try);

my $term = new Term::ReadLine('anste-master');

use constant DEFAULT_PORT => 8000;

use constant HELP => "Commands available:\n" .
                     "connect <host> [port]\n" .
                     "exec <file>\n" .
                     "put <file>\n" .
                     "quit\n";

my $server = new ANSTE::Comm::WaiterServer();
$server->startThread();

my $waiter = ANSTE::Comm::HostWaiter->instance();
my $client = new ANSTE::Comm::MasterClient;

my $prompt = ">> ";
my $OUT = $term->OUT || \*STDOUT;
my $cmd;
while (defined($cmd = $term->readline($prompt))) {
    next if not $cmd;
    try {
        my $result = _parseCmd($cmd);
        print $OUT $result, "\n";
        $term->addhistory($cmd);
    } catch Error with {
        my $E = shift;
        my $msg = $E->stringify();
        print $OUT "Execution error: $msg\n";
    };
}

# TODO: Check number of arguments, etc.
sub _parseCmd
{
    my ($cmd) = @_;

    my ($name, @args) = split(/ /, $cmd);

    if ($name eq 'connect') {
        _connect($args[0], $args[1]);
    }
    elsif ($name eq 'exec') {
        _execute($args[0]);
    }
    elsif ($name eq 'put') {
        _put($args[0]);
    }
    elsif ($name eq 'help') {
        return HELP;
    }
    elsif ($name eq 'quit') {
        exit 0;
    }
    else {
        return "Command not recognised";
    }
}

sub _connect # (host, port)
{
    my ($host, $port) = @_;

    if (not $port) {
        $port = DEFAULT_PORT;
    }

    $client->connect("http://$host:$port");

    return "OK";
}

sub _put # (file)
{
    my ($file) = @_;

    if (not $client->connected()) {
        return "Not connected";
    }

    if (not ANSTE::Validate::fileReadable($file)) {
        return "File $file not found";
    }

    $client->put($file);
    
    return 'OK';
}

sub _execute # (file)
{
    my ($file) = @_;

    _put($file);
    $client->exec($file, 'out.log');
    $waiter->waitForAnyExecution();
    $client->get('out.log');
    my $content = slurp '<out.log';
    $client->del('out.log');
    $client->del($cmd);
    unlink 'out.log';
    
    return "Output:\n$content";
}

